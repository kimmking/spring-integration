<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="mqtt"
		xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>MQTT Support</title>

	<section id="mqtt-intro">
		<title>Introduction</title>
		<para>
			Spring Integration provides inbound and outbound channel adapters supporting the
			MQ Telemetry Transport (MQTT) protocol. The current implementation uses the
			<ulink url="http://www.eclipse.org/paho/">Eclipse Paho MQTT Client</ulink>
			library.
		</para>
		<para>
			Configuration of both adapters is achieved using the
			<classname>DefaultMqttPahoClientFactory</classname>.
			Refer to the Paho documentation for more information about configuration
			options.
		</para>
	</section>

	<section id="mqtt-inbound">
		<title>Inbound (message-driven) Channel Adapter</title>
		<para>
			The inbound channel adapter is implemented by the
			<classname>MqttPahoMessageDrivenChannelAdapter</classname>. For convenience, it
			can be configured using the namespace. A minimal configuration might be:
		</para>
		<programlisting language="xml"><![CDATA[<bean id="clientFactory"
		class="org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory">
	<property name="userName" value="${mqtt.username}"/>
	<property name="password" value="${mqtt.password}"/>
</bean>

<int-mqtt:message-driven-channel-adapter id="mqttInbound"
	client-id="${mqtt.default.client.id}.src"
	url="${mqtt.url}"
	topics="sometopic"
	client-factory="clientFactory"
	channel="output"/>]]></programlisting>
		<para>
			Attributes:
		</para>
		<programlisting><![CDATA[<int-mqtt:message-driven-channel-adapter id="oneTopicAdapter"
	client-id="foo"]]> <co id="mqtt-i-01"/><![CDATA[
	url="tcp://localhost:1883"]]> <co id="mqtt-i-02"/><![CDATA[
	topics="bar,baz"]]> <co id="mqtt-i-03"/><![CDATA[
	qos="1,2"]]> <co id="mqtt-i-03a"/><![CDATA[
	converter="myConverter"]]> <co id="mqtt-i-04"/><![CDATA[
	client-factory="clientFactory"]]> <co id="mqtt-i-05"/><![CDATA[
	send-timeout="123"]]> <co id="mqtt-i-06"/><![CDATA[
	error-channel="errors"]]> <co id="mqtt-i-07"/><![CDATA[
	channel="out" />]]></programlisting>
		<calloutlist>
			<callout arearefs="mqtt-i-01">
				The client id.
			</callout>
			<callout arearefs="mqtt-i-02">
				<para>
					The broker URL.
				</para>
				<note>
					Starting with <emphasis>version 4.1</emphasis> the url can be omitted and, instead,
					the server URIs can be provided in the <code>serverURIs</code> property of the
					<classname>DefaultMqttPahoClientFactory</classname>. This enables, for example,
					connection to a highly available (HA) cluster.
				</note>
			</callout>
			<callout arearefs="mqtt-i-03">
				A comma delimited list of topics from which this adapter will receive messages.
			</callout>
			<callout arearefs="mqtt-i-03a">
				A comma delimited list of QoS values. Can be a single value that is applied to all
				topics, or a value for each topic (in which case the lists must the same length).
			</callout>
			<callout arearefs="mqtt-i-04">
				An <interfacename>MqttMessageConverter</interfacename> (optional). The default
				<classname>DefaultPahoMessageConverter</classname> produces a message with a <code>String</code>
				payload (by default) with the following headers:
				<itemizedlist>
					<listitem><code>mqtt_topic</code> - the topic from which the message was received</listitem>
					<listitem><code>mqtt_duplicate</code> - true if the message is a duplicate</listitem>
					<listitem><code>mqtt_qos</code> - the quality of service</listitem>
				</itemizedlist>
				The <classname>DefaultPahoMessageConverter</classname> can be configured to return the raw
				<code>byte[]</code> in the payload by declaring it as a &lt;bean/&gt; and setting the
				<code>payloadAsBytes</code> property.
			</callout>
			<callout arearefs="mqtt-i-05">
				The client factory.
			</callout>
			<callout arearefs="mqtt-i-06">
				The send timeout - only applies if the channel might block (such as a bounded <code>QueueChannel</code>
				that is currently full).
			</callout>
			<callout arearefs="mqtt-i-07">
				The error channel - downstream exceptions will be sent to this channel, if supplied, in an
				<classname>ErrorMessage</classname>; the payload is a <classname>MessagingException</classname>
				containing the failed message and cause.
			</callout>
		</calloutlist>
		<section>
			<title>Adding/Removing Topics at Runtime</title>
			<para>
				Starting with <emphasis>version 4.1</emphasis>, it is possible to programmatically change the topics
				to which the adapter is subscribed. Methods <code>addTopic()</code> and <code>removeTopic()</code> are
				provided. When adding topics, you can optionally specify the <code>QoS</code> (default: 1). You can
				also modify the topics by sending an appropriate message to a <code>&lt;control-bus/&gt;</code> with
				an appropriate payload: <code>"myMqttAdapter.addTopic('foo', 1)"</code>.
			</para>
			<para>
				Stopping/starting the adapter has no effect on the topic list (it does <emphasis role="bold">not</emphasis>
				revert to the original settings in the configuration). The changes are not retained beyond the
				life cycle of the application context; a new application context will revert to the configured settings.
			</para>
			<para>
				Changing the topics while the adapter is stopped (or disconnected from the broker) will take effect
				the next time a connection is established.
			</para>
		</section>
	</section>

	<section id="mqtt-outbound">
		<title>Outbound Channel Adapter</title>
		<para>
			The outbound channel adapter is implemented by the <classname>MqttPahoMessageHandler</classname> which
			is wrapped in a <code>ConsumerEndpoint</code>. For convenience, it
			can be configured using the namespace.
		</para>
		<para>
			Starting with <emphasis>version 4.1</emphasis>, the adapter supports asynchronous sends, avoiding
			blocking until the delivery is confirmed; application events can be emitted to enable applications
			to confirm delivery if desired.
		</para>
		<para>
			Attributes:
		</para>
		<programlisting><![CDATA[<int-mqtt:outbound-channel-adapter id="withConverter"
	client-id="foo"]]> <co id="mqtt-o-01"/><![CDATA[
	url="tcp://localhost:1883"]]> <co id="mqtt-o-02"/><![CDATA[
	converter="myConverter"]]> <co id="mqtt-o-03"/><![CDATA[
	client-factory="clientFactory"]]> <co id="mqtt-o-04"/><![CDATA[
	default-qos="1"]]> <co id="mqtt-o-05"/><![CDATA[
	default-retained="true"]]> <co id="mqtt-o-06"/><![CDATA[
	default-topic="bar"]]> <co id="mqtt-o-07"/><![CDATA[
	async="false"]]> <co id="mqtt-o-08"/><![CDATA[
	async-events="false"]]> <co id="mqtt-o-09"/><![CDATA[
	channel="target" />]]></programlisting>
		<calloutlist>
			<callout arearefs="mqtt-o-01">
				The client id.
			</callout>
			<callout arearefs="mqtt-o-02">
				<para>
					The broker URL.
				</para>
				<note>
					Starting with <emphasis>version 4.1</emphasis> the url can be omitted and, instead,
					the server URIs can be provided in the <code>serverURIs</code> property of the
					<classname>DefaultMqttPahoClientFactory</classname>. This enables, for example,
					connection to a highly available (HA) cluster.
				</note>
			</callout>
			<callout arearefs="mqtt-o-03">
				An <interfacename>MqttMessageConverter</interfacename> (optional). The default
				<classname>DefaultPahoMessageConverter</classname>
				recognizes the following headers:
				<itemizedlist>
					<listitem><code>mqtt_topic</code> - the topic to which the message will be sent</listitem>
					<listitem><code>mqtt_retained</code> - true if the message is to be retained</listitem>
					<listitem><code>mqtt_qos</code> - the quality of service</listitem>
				</itemizedlist>
			</callout>
			<callout arearefs="mqtt-o-04">
				The client factory.
			</callout>
			<callout arearefs="mqtt-o-05">
				The default quality of service (used if no <code>mqtt_qos</code> header is found). Not allowed
				if a custom <code>converter</code> is supplied.
			</callout>
			<callout arearefs="mqtt-o-06">
				The default value of the retained flag (used if no <code>mqtt_retaind</code> header is found). Not allowed
				if a custom <code>converter</code> is supplied.
			</callout>
			<callout arearefs="mqtt-o-07">
				The default topic to which the message will be sent (used if no <code>mqtt_topic</code> header is found).
			</callout>
			<callout arearefs="mqtt-o-08">
				When <code>true</code>, the caller will not block waiting for delivery confirmation when a message is
				sent.
				Default:false (the send blocks until delivery is confirmed).
			</callout>
			<callout arearefs="mqtt-o-09">
				When <code>async</code> and <code>async-events</code> are both <code>true</code>, an
				<classname>MqttMessageSentEvent</classname> is emitted, containing the message, the
				topic, the <code>messageId</code> generated by the client library, the <code>clientId</code>
				and the <code>clientInstance</code> (incremented each time the client is connected).
				When the delivery is confirmed by the client library, an
				<classname>MqttMessageDeliveredEvent</classname> is emitted, containing the the <code>messageId</code>,
				<code>clientId</code> and the <code>clientInstance</code>, enabling
				delivery to be correlated with the send. These events can be received by any
				<interfacename>ApplicationListener</interfacename>, or by an event inbound channel adapter. Note that
				it is possible that the <classname>MqttMessageDeliveredEvent</classname> might be received before
				the <classname>MqttMessageSentEvent</classname>.
				Default: <code>false</code>.
			</callout>
		</calloutlist>
	</section>

</chapter>
